@startuml





/' Objects '/

class BasicBoid {
	+BasicBoid(double, Point, Vector, Vector)
	+BasicBoid(double mass, double starting_position_x, double starting_position_y, double speed_x, double speed_y, double acceleration_x, double acceleration_y)
	-currentPosition : Point
	+getPosition() : Point& {query}
	-acceleration : Vector
	-speed : Vector
	+getAcceleration() : Vector& {query}
	+getSpeed() : Vector& {query}
	+operator==(const BasicBoid &) : bool {query}
	+getMass() : double {query}
	-mass : double
	+MyTurn(Vector, double) : void
	+boidPrint(std::ostream &) : void {query}
	+setAcceleration(double, double) : void
	+setAcceleration(const Vector &) : void
	+setSpeed(double, double) : void
	+setSpeed(const Vector &) : void
}


class ChasingRule {
	+ChasingRule(double rule_strength)
	+calculateRuleForIndividual(const BasicBoid &, sf::Vector2i) : Vector
	+getRuleStrength() : double {query}
	-ruleStrength : double
}


class Flock {
	+Flock(double flock_chasing_coefficient, double flock_repulsion, double flock_cohesion, double flock_alingment)
	+~Flock()
	+operator[](int) : BasicBoid&
	-flockMembers : BasicBoid**
	-chase : ChasingRule
	-separation : SeparationRule
	+isMemberOfFlock(const BasicBoid*) : bool
	-flockSize : size_t
	+insert(BasicBoid*) : void
	+moveFlock(double, sf::Vector2i) : void
	+remove(BasicBoid*) : void
}


abstract class ForcesBetweenBoids {
	+ForcesBetweenBoids()
	+{abstract} calculateRuleStrengthBetweenBoids(const BasicBoid &, const BasicBoid &) : Vector {query}
}


class Point {
	+Point(double x, double y)
	+Vector2f() {query}
	+~Point()
	+operator+(const Point &) : Point {query}
	+operator+(const Vector &) : Point {query}
	+getPoint() : Point& {query}
	+operator-(const Point &) : Vector {query}
	+operator==(const Point &) : bool {query}
	+calculateDistance(const Point &) : double {query}
	+getX() : double {query}
	+getY() : double {query}
	-x : double
	-y : double
	+{static} Origo : static const Point
	+operator=(const Point &) : void
	+setPoint(double, double) : void
	+setPoint(Point) : void
	+setX(double) : void
	+setY(double) : void
}


abstract class Rule {
	+Rule(double rule_strength)
	+{abstract} calculateRuleForIndividual(BasicBoid**, const BasicBoid &, size_t) : Vector {query}
	+getRuleStrength() : double {query}
	-ruleStrength : double
}


class SeparationRule {
	+SeparationRule(double rule_strength)
	+calculateRuleForIndividual(BasicBoid**, const BasicBoid &, size_t) : Vector {query}
	+calculateRuleStrengthBetweenBoids(const BasicBoid &, const BasicBoid &) : Vector {query}
}


class Vector {
	+Vector(double x, double y)
	+Vector(const Vector &)
	+Vector(const sf::Vector2i &)
	+Vector2f() {query}
	+~Vector()
	+operator+(const Vector &) : Vector {query}
	+operator-() : Vector {query}
	+operator-(const Vector &) : Vector {query}
	+projectionOnto(const Vector &) : Vector {query}
	+rotate(double) : Vector {query}
	+getVector() : Vector& {query}
	+isNull() : bool
	+operator==(const Vector &) : bool {query}
	+angleWith(const Vector &) : double {query}
	+getLength() : double {query}
	+getX() : double {query}
	+getY() : double {query}
	+operator*(const Vector &) : double {query}
	-x : double
	-y : double
	+{static} nullVector : static const Vector
	+normaliastion() : void
	+operator+=(const Vector &) : void
	+operator=(const Vector &) : void
	+setVector(double, double) : void
	+setVector(const Vector &) : void
	+setX(double) : void
	+setY(double) : void
	+vectorPrint(std::ostream &) : void {query}
}





/' Inheritance relationships '/

.ForcesBetweenBoids <|-- .SeparationRule


.Rule <|-- .SeparationRule





/' Aggregation relationships '/

.BasicBoid *-- .Point


.BasicBoid "2" *-- .Vector


.Flock o-- .BasicBoid


.Flock *-- .ChasingRule


.Flock *-- .SeparationRule


.Point *-- .Point


.Vector *-- .Vector






/' Nested objects '/



@enduml
